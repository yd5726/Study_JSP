1. 스트립트릿 : <% %>
   JSP에서 service 메소드 내에 들어가는 명령문
   
2. 표현식 : <%= %>
   데이터 출력 : 변수값, 리턴하는 메소드의 리턴값
   service 
   
확인 경로
D:\Study_Web\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost

3. 선언(declaration tag) : <%! %>
   필드(멤버변수), 메소드 선언하는 부분
   JSP 클래스 내에 들어가는 부분
   
4. 지시어 : <%@ %>
   - page 지시어
     현재 JSP 페이지에 적용할 속성을 지정
     import(외부 또는 다른 패키지) 속성으로 자바에서의 클래스 import 선언문을 지정
     ex) <%@page import="java.util.Date"%>
     
   - include 지시어
     매 페이지마다 공통적인 부분을 별도 페이지로 만들고 별도 페이지를 매 페이지에 포함시킨다.
     유지보수가 용이하다.
     정적 페이지로 include 지시어가 선언된 페이지만 JAVA 파일이 생성되고 컴파일된다.
     ex) <%@ include file="include/today.jsp" %>
   - tablib 지시어 ★ 최종 사용 ★
   	 추가적인 library를 설치해야 한다.
   	 : JSTL(JSP Standard Tag Library)
   	 ex) <%@ taglib uli='' prefix='' %>
   
5. 주석 : ctrl + shift + /. ctrl+ shift + c
	* <!-- --> : HTML 태그에 대한 주석
	* <%-- --> : JSP 태그에 대한 주석
	* /**/, // : JAVA 코드에 해당하는 주석

6. JSP 내장객체 - ★ 내장객체와 scope 공부 필요 ★
   JSP 파일이 서블릿으로 변환될 때 자동생성되는 객체
   service 메소드에 선언된 변수에 해당한다. 스크립트릿과 표현식에서 사용된다.
   주로 사용하는 내장객체 : request, response, session , out
   
	6.1 out : 출력과 관련된 내장객체 변수이다.
	6.2 request : 서블릿의 doGet, doPost, service 메소드의 파라미터와 동일한 변수이다.
				  요청 시의 정보를 담고 있다.
	6.3 response : 서블릿의 doGet, doPost, service 메소드의 파라미터와 동일한 변수 응답에
				   필요한 정보를 담고 있다.
	6.4. session :
	어플리케이션에 처음 접속시 세션이 만들어지고,
	브라우저를 모두 닫으면 세션이 끊긴다
	여러 페이지마다 확인해야 하는 정보가 있다면 session scope 에 담는다.
	scope 에 담는 값은 attribute 로 담는다. : setAttribute(속성명, 값);
	-> scope 에 저장된 데이터를 확인한다. : getAttribute(속성명);
	  실제 저장한 값의 데이터타입으로 형변환(cast)해서 변수에 담는다.
	  
[실습]
1. 계산기화면: calculate.jsp를 만든다.
   두 숫자를 입력, 연산자 선택해서
   계산하기 버튼을 클릭시 form 태그를 submit 한다.
   : 요청은 calcualte_result.jsp
2. 계산결과화면: calculate_result.jsp를 만든다.
   두 숫자, 연산자에 대한 계산결과를 출력한다.
3. calculate_result.jsp에서 화면을 홈으로 forward 한다.
   홈화면(index.jsp)에서 연산결과를 출력한다.
   ex) 계산결과: 10 + 20 = 30 
=========================================================================   
주소창에 보내지는 값: 파라미터
요청url?파라미터명1=값1&파라미터명2=값2&파라미터명3=값3
=========================================================================
파라미터로 보내진 값은 모두 문자열로 
파라미터에 담긴 값을 알려면 
String 값1 = request.getParameter("파라미터명1");
String 값2 = request.getParameter("파라미터명2");
String 값3 = request.getParameter("파라미터명3");

그런데 실제 보낸 값이 숫자라면
String -> int 로 데이터타입을 바꿔야 한다.
String 은 레퍼런스타입이고, int 는 프리미티브 타입이므로 형변환 불가
 =========================================================================
wrapper 클래스인 Integer 클래스에는 
특정 데이터타입을 int 또는 Integer 타입으로 변환해주는 메소드가 있다.
그 메소드를 사용해 String -> int 또는 String -> Integer 로 변환한다
String -> int : Integer.parseInt()
String -> Integer : Integer.valueOf() -> int 로 unboxing됨
결국 두 메소드의 결과값은 int 타입에 담을 수 있다.
=========================================================================
어떤 값을 응답화면에서 출력하려면 어딘가 값이 저장되어 있어야 한다.
요청에 대한 처리시 request scope에 데이터를 담으면
데이터를 담는 처리를 한 페이지와 forward로 응답하는 페이지에서는 
request scope 에 저장된 값을 알 수 있다.
request scope에 값 저장: request.setAttribute("속성명", 저장값);
                           변수명 = 값; 과 같다
저장값은 int, String, boolean, Date, MemberDTO, ArrayList .... 뭐든 가능
=========================================================================                         
request scope의 값 확인: request.getAttribute("속성명"); 
                           변수명 과 같다 
데이터확인시는 실제 저장한 값의 데이터타입 변수에 담아야 하는데.
request.getAttribute() 의 리턴 타입은 Object.
실제 저장한 타입으로 변환하려면
Object -> int, Object -> String, Object -> boolean
Object -> Date, Object -> MemberDTO, Object -> ArrayList
(MemberDTO) (DTO)
모든 프리미티브 타입은 레퍼클래스를 갖고 있다
int -> Integer, char -> Character
, byte -> Byte, boolean -> Boolean,
=========================================================================
JSP 표준 액션태그 <jsp: >
1. include 액션 : <jsp:include  page='' /> 동적 
                 <jsp:include  page=''>   </jsp:include >
include 지시어: <%@ include file=''%> : 정적
=======================================================자바스프링에 사용?이용?====
자바빈(JavaBean):
JSP에서 데이터를 저장하고, 관리하기 위한 클래스에 해당 : DTO
자바빈 내부 데이터(필드)는 setter 메소드와 getter 메소드를 사용
setProperty 액션 : setter 메소드와 같다.(필드에 데이터를 담는다.)
getProperty 액션 : getter 메소드와 같다.(필드에 데이터를 불러온다.)
Property = 필드
useBean 액션 : 새로운 자바빈(DTO) 객체를 생성하거나 기존에 존재하는 자바빈 객체의 접근에 사용
=========================================================================
★ 자바빈(JavaBean): DTO에 해당함
★ Property = 필드
★ 이름을 똑같이 써야한다.
=========================================================================
지금까지는 데이터 출력을 표현식(<%= %>)으로 하였다.
이제부터는 EL(Expression Language)로 할 것이다???
EL : ${}
[속성(attribute) 영역 : page scope < request scope < session scope < application scope
 주로 request scope, session scope를 사용한다.]
EL은 주로 모든 속성(attribute)을 출력하는데 사용한다.