<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hr">
	<!-- <select id='list' resultType='hr.EmployeeDTO'>
		select * from employees order by employee_id
	</select> -->
	<!-- 전체사원목록조회 -->
	<select id='list' resultType='hr.EmployeeDTO'>
		select last_name||' '|| first_name name, department_name
		, job_title
		, e.* 
		from employees e left outer join departments d 
						on e.department_id=d.department_id
	 	inner join jobs j on e.job_id=j.job_id
	 	<if test='department_id != -1'>
	 		<!-- <if test='department_id == 0'> where e.department_id is null</if>  
			<if test='department_id != 0'>where e.department_id = #{department_id}</if> -->
			<choose>
				<when test='department_id==0'>where e.department_id is null</when>
				<otherwise>where e.department_id = #{department_id}</otherwise>
			</choose>
		</if>	 
		order by employee_id
	</select>
	<!-- 선택한 사원정보조회 -->
	<select id='info' resultType='hr.EmployeeDTO'>
		select e.*, e.last_name||' '|| e.first_name name
			   , department_name, job_title
			   , m.last_name||' ' ||m.first_name manager_name
		from employees e inner join jobs j
		on e.job_id = j.job_id
		left outer join departments d on d.department_id = e.department_id
		left outer join employees m on e.manager_id = m.employee_id
		where e.employee_id = #{id}
	</select>
	<!-- 사원이 소속되어 있는 부서목록 조회 -->
	<select id="department_list" resultType="hr.DepartmentDTO">
		select distinct department_id, NVL(department_name,'소속없음') department_name
		from employees e left outer join departments d
		using (department_id)
		order by department_name
	</select>
	<!-- 회사 전체 부서목록 -->
	<select id='department_list_all' resultType='hr.DepartmentDTO'>
		select department_id, department_name from departments
		order by department_name
	</select>
	<!-- 회사 전체 업무목록 -->
	<select id='job_list_all' resultType='hr.JobDTO'>
		select * from jobs order by job_title
	</select>
	<!-- 매니저로 지정할 전체 사원목록 -->
	<select id='manager_list_all' resultType='hr.ManagerDTO'>
		select employee_id manager_id
		, last_name||' '||first_name manager_name 
		from employees 
		order by manager_name
	</select>
	<!-- 선택한 사원정보변경저장 -->
	<update id='update'>
		update employees
			set last_name = #{last_name}, first_name = #{first_name}
			, email = #{email}, phone_number = #{phone_number}
			, salary = #{salary}, job_id = #{job_id}, hire_date = #{hire_date}
			<if test='department_id == -1'>
				, department_id = null
			</if>
			<if test='department_id != -1'>
				, department_id = #{department_id}
			</if>
			<choose>
				<when test='manager_id == -1'>
					, manager_id = null
				</when>
				<otherwise>
					, manager_id = #{manager_id}
				</otherwise>
			</choose>
		where employee_id = #{employee_id}	
	</update>
	<!-- 선택한 사원정보삭제 -->
	<delete id='employee_delete'>
		delete from employees where employee_id = #{employee_id}
	</delete>
	<!-- 신규사원정보저장 -->
	<insert id='employee_insert'>
		insert into employees (employee_id, last_name, first_name, email, phone_number,
		 job_id, hire_date, salary, manager_id, department_id) 
		values(employees_seq.nextval, #{last_name}, #{first_name}, #{email}, #{phone_number},
		 #{job_id}, #{hire_date}, #{salary}
		,<if test='manager_id == -1'> null </if>
		<if test='manager_id != -1'> #{manager_id} </if>
		,<choose>
			<when test='department_id == -1'> null </when>
			<otherwise> #{department_id} </otherwise>
		</choose>
		)
	</insert>
</mapper>